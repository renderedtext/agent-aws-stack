version: v1.0
name: Main pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
blocks:
  - name: Install dependencies
    dependencies: []
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: CI
          value: 'true'
      jobs:
        - name: npm install and cache
          commands:
            - checkout
            - nvm use
            - node --version
            - npm --version
            - cache restore
            - npm install
            - cache store

  - name: Lint & Test
    dependencies:
      - Install dependencies
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: CI
          value: 'true'
      jobs:
        - name: Lint ansible recipes
          commands:
            - sudo apt-get -y install python3-venv
            - checkout
            - cache restore venv-$SEMAPHORE_GIT_BRANCH-$(checksum requirements.txt)
            - make ansible.lint
            - cache store venv-$SEMAPHORE_GIT_BRANCH-$(checksum requirements.txt) venv
        - name: Unit tests
          commands:
            - checkout
            - nvm use
            - node --version
            - npm --version
            - cache restore
            - npm test

  - name: Build
    dependencies:
      - Lint & Test
    task:
      jobs:
        - name: Build AMI
          commands:
            - checkout
            - cache restore venv-$SEMAPHORE_GIT_BRANCH-$(checksum requirements.txt)
            - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            - sudo apt-get update && sudo apt-get -y install packer python3-venv
            - make packer.init
            - make packer.validate
            - make packer.build
            - artifact push workflow packer/manifest.json -d manifest.json

  - name: Launch
    dependencies:
      - Build
    task:
      secrets:
        - name: s1-agent-aws-stack-testing-token
      env_vars:
        - name: SEMAPHORE_AGENT_STACK_NAME
          value: agent-aws-stack-testing
        - name: SEMAPHORE_ORGANIZATION
          value: semaphore
        - name: SEMAPHORE_AGENT_TOKEN_PARAMETER_NAME
          value: s1-agent-aws-stack-testing-token
        - name: SEMAPHORE_AGENT_USE_DYNAMIC_SCALING
          value: 'false'
        - name: SEMAPHORE_AGENT_USE_WARM_POOL
          value: 'false'
      jobs:
        - name: Launch stack
          commands:
            - checkout
            - cache restore
            - artifact pull workflow manifest.json
            - 'export SEMAPHORE_AGENT_AMI=$(cat manifest.json | jq -r .builds[0].artifact_id | cut -d: -f2)'
            - aws ssm put-parameter -name s1-agent-aws-stack-testing-token --value $TOKEN --type SecureString --overwrite
            - cdk deploy --require-approval never --progress events

  - name: Tests
    dependencies:
      - Launch
    execution_time_limit:
      minutes: 5
    task:
      agent:
        machine:
          type: s1-agent-aws-stack-testing
      jobs:
        - name: Run goss tests
          commands:
            - checkout
            - goss validate

after_pipeline:
  task:
    env_vars:
      - name: SEMAPHORE_AGENT_STACK_NAME
        value: ami-testing
      - name: SEMAPHORE_ORGANIZATION
        value: semaphore
      - name: SEMAPHORE_AGENT_TOKEN_PARAMETER_NAME
        value: ami-testing-token
      - name: SEMAPHORE_AGENT_USE_DYNAMIC_SCALING
        value: 'false'
      - name: SEMAPHORE_AGENT_USE_WARM_POOL
        value: 'false'
    jobs:
      - name: Destroy AWS stack
        commands:
          - checkout
          - artifact pull workflow manifest.json
          - 'export SEMAPHORE_AGENT_AMI=$(cat manifest.json | jq -r .builds[0].artifact_id | cut -d: -f2)'
          - cdk destroy --force
